oco2_modis_vistool.py

The purpose of this script is to pull Aqua-MODIS RGB images from Worldview
using the NASA GIBS API and overlay various OCO-2 data fields for case study 
analysis in support of OCO-2 cloud and aerosol screening validation.

It can be used as a command line tool to plot any data in the OCO-2 Lite file, filtered by warn level and/or quality flag
or can be called as a function from within another python program to plot other data.

GIBS developer documentation:https://wiki.earthdata.nasa.gov/display/GIBS/GIBS+API+for+Developers

Minimum command line call:
python oco2_modis_vistool.py

Function call:
from oco2_modis_vistool import do_modis_overlay_plot

do_modis_overlay_plot([minlat, maxlon], [maxlat, minlon], yyyy + "-" + mm + "-" + dd, 
                      lat_data, lon_data, oco2_data, 
                      var_lims=[vmin,vmax], interest_pt=interest_pt, cmap=cmap,
		      outfile=outfile, var_label=cbar_name, cities=cities)


Output:
Image (.png) named variable_region_date_quality_warn.png by default in specified output directory (default: code directory)

Runtime Requirements for Command Line Use:

1) json configuration file (default: oco2_modis_vistool_config.json in code directory)
2) This script is meant to run on ocomaster at Colorado State University. 
   To run it elsewhere, the data locations will need to be updated 
   and modules will need to be verified.
   
System Requirements:
1) GDAL version 1.9.1 or greater with cURL support enabled. 
       To check if cURL is enabled for GDAL, type "gdalinfo --format WMS". 
       If cURL is enabled you will see information about the WMS format, if not, 
       you will get an error message and you will need to reconfigure GDAL to support cURL.
       NOTE: This is already a part of the Anaconda distribution of Python. 
             You will likely need to set an environmental variable called GDAL_DATA in your bash profile 
	     that points to gdal within your anaconda folder but then should be good to go.

Python requirements:
1) Python 2.7 (untested but likely compatible with minimal updates on Python 3)
2) Modules:
       warnings
       os
       sys
       glob
       h5py
       numpy
       math
       pandas
       cartopy
       shapefile
       shapely
       matplotlib
       mpl_toolkits
       osgeo
       xml
       json
       argparse
       re

Configurable Parameters:
Required:
    date (string, format:"YYYY-MM_DD"): The date of your case study. This is used to get the correct RGB.
    geo_upper_left (list, format:[lat, lon]): The latitude and longitude coordinates of the upper left hand corner of your area of interest.
    geo_lower_right (list, format:[lat, lon]): The latitude and longitude coordinates of the lower right hand corner of your area of interest.
    
Optional:
    region (string, default: none): The region of your case study. This is used to build the default output filename in the command line execution.
    cmap (string, default: "jet"): The desired colormap or color for the overlay data. 
                                   Built-in colormap options can be found here: http://matplotlib.org/examples/color/colormaps_reference.html
				   Built-in single color options can be found here: http://matplotlib.org/examples/color/named_colors.html
    oco2_overlay_info (dict, default: none): The information for the OCO-2 variable to overlay on the MODIS RGB
        file (string): This is required for a variable overlay. The full path to the file that contains the variable to overlay.
	variable (string, format:"Preprocessors/dp_adp"): This is required for a variable overlay. The full path to the variable within the file specified. 
	variable_plot_lims (list, format:[min, max], default: [integer floor of variable's minimum value, integer ceiling of variable's maximum value]):
	                    The maximum and minimum values used for plotting and color assignment. Any data values beyond the min and max will show up on the plot as the
			    minimum or maximum color, respectively.
        lat_name (string, format:"latitude"): This is required for a variable overlay if running from the command line. 
	                                        The name of the latitude array associated with the variable. Used for subsetting and plotting.
	lon_name (string, format:"longitude"): This is required for a variable overlay if running from the command line. 
	                                         The name of the longitude array associated with the variable. Used for subsetting and plotting.
	orbit (integer, format:11016): This is optional for a variable overlay if the variable is contained in a lite file. Used for subsetting.
	lite_QF (string, format:"good", default: "all"): The quality flag applied to your variable. Used for filtering. Options: "good", "bad", "all"
	lite_warn_lims (list, format:[0,15], default: [0,20]): The range of acceptable warn levels applied to your variable. Used for filtering. Options: integers from 0 to 20
    ground_site (list, format:[lat lon], default: none): The latitude and longitude coordinates of a ground site of interest. It will show up as a white star on the output plot.
    city_labels (string, default: none): This is optional to display city names on the output plot in the color specified in this string.
                                         They are on a 10m scale, so it works best if you are displaying a small area.
					 Python built-in named colors are available here: http://matplotlib.org/examples/color/named_colors.html
    output_dir (string, default: the directory that you are running the code in): The full output directory path where you would like the output plot to be generated
    outfile (string, default example: xco2_Amazon_20150701_all_quality_WL_0to20.png): The name of the output plot


Corresponding author:
Heather Cronk
heather.cronk@colostate.edu

Revision history:
08/2016 (H.Q. Cronk; N.D. Tourville): Initial version
